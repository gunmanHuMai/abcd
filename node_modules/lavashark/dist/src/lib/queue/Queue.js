"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Queue = void 0;
class Queue {
    tracks;
    constructor() {
        this.tracks = [];
    }
    /**
     * Gets the queue size.
     */
    get size() {
        return this.tracks.length;
    }
    /**
     * Gets the queue duration in milliseconds.
     */
    get duration() {
        return this.tracks.reduce((acc, track) => acc + track.duration.value, 0);
    }
    /**
     * [Internal] Adds a track to the queue. External users should use Player.addTracks() method instead.
     * @param {Track | UnresolvedTrack} track - The track to add to the queue
     */
    add(track) {
        this.tracks.push(track);
    }
    /**
     * Polls the queue for the next track.
     * @returns {Track | UnresolvedTrack | null} The next track in the queue or null if the queue is empty.
     */
    poll() {
        return this.tracks.shift() ?? null;
    }
    /**
     * Remove the next n tracks from the queue
     * @param {number} n - The number of tracks to skip
     */
    skipNTracks(n) {
        this.tracks.splice(0, n - 1);
    }
    /**
     * Shuffles the queue
     */
    shuffle() {
        if (this.tracks.length) {
            const len = this.tracks.length;
            for (let i = 0; i < len; i++) {
                const rand = Math.floor(Math.random() * (len - i)) + i;
                [this.tracks[i], this.tracks[rand]] = [this.tracks[rand], this.tracks[i]];
            }
        }
    }
    /**
     * Clears the queue.
     */
    clear() {
        this.tracks = [];
    }
    remove(arg1, arg2) {
        if (typeof arg1 === 'undefined')
            arg1 = 0;
        if (arg2 !== undefined) {
            if (typeof arg1 !== 'number' || isNaN(arg1))
                throw TypeError('Start value must be a number');
            if (typeof arg2 !== 'number' || isNaN(arg2))
                throw TypeError('End value must be a number');
            if (arg1 < 0 || arg2 < arg1 || arg1 > this.tracks.length || arg2 > this.tracks.length) {
                // Index out of range
                return false;
            }
            this.tracks.splice(arg1, arg2);
        }
        else {
            if (typeof arg1 !== 'number' || isNaN(arg1))
                throw TypeError('Index must be a number');
            if (arg1 < 0 || arg1 > this.tracks.length) {
                // Index out of range
                return false;
            }
            this.tracks.splice(arg1, 1);
        }
        return true;
    }
}
exports.Queue = Queue;
